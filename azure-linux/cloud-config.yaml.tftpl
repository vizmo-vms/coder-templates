#cloud-config
cloud_final_modules:
- [scripts-user, always]
bootcmd:
  # work around https://github.com/hashicorp/terraform-provider-azurerm/issues/6117
  - until [ -e /dev/disk/azure/scsi1/lun10 ]; do sleep 1; done
device_aliases:
  homedir: /dev/disk/azure/scsi1/lun10
disk_setup:
  homedir:
    table_type: gpt
    layout: true
fs_setup:
  - label: coder_home
    filesystem: ext4
    device: homedir.1
mounts:
  - ["LABEL=coder_home", "/home/${username}"]
hostname: ${hostname}
groups:
  - docker
users:
  - name: ${username}
    sudo: ["ALL=(ALL) NOPASSWD:ALL"]
    groups: 
      - sudo
      - docker
    shell: /bin/bash
packages:
  - git
  - apt-transport-https
  - ca-certificates
  - curl
  - gnupg
  - lsb-release
  - unattended-upgrades
write_files:
  - path: /opt/coder/init
    permissions: "0755"
    encoding: b64
    content: ${init_script}
  - path: /etc/systemd/system/coder-agent.service
    permissions: "0644"
    content: |
      [Unit]
      Description=Coder Agent
      After=network-online.target
      Wants=network-online.target

      [Service]
      User=${username}
      ExecStart=/opt/coder/init
      Restart=always
      RestartSec=10
      TimeoutStopSec=90
      KillMode=process

      OOMScoreAdjust=-900
      SyslogIdentifier=coder-agent

      [Install]
      WantedBy=multi-user.target
package_update: true
package_upgrade: true
runcmd:
  - chown ${username}:${username} /home/${username}

  # Install Node.js LTS 18
  - curl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -
  - sudo DEBIAN_FRONTEND="noninteractive" apt-get install -y nodejs

  # Set up npm global modules in user's homec
  - |
    if ! grep -q "NPM_CONFIG_PREFIX=/home/${username}/.npm-global" /home/${username}/.bashrc; then
      echo 'export NPM_CONFIG_PREFIX=/home/${username}/.npm-global' >> /home/${username}/.bashrc
    fi
  - |
    if ! grep -q "PATH=\$PATH:/home/${username}/.npm-global/bin" /home/${username}/.bashrc; then
      echo 'export PATH=$PATH:/home/${username}/.npm-global/bin' >> /home/${username}/.bashrc
    fi


  # Install GitHub CLI
  - |
    sudo mkdir -p -m 755 /etc/apt/keyrings
    wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null
    sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
    sudo apt-get update
    sudo apt-get install -y gh

  # Install jq
  - sudo apt-get install -y jq

  # Install Starship prompt
  - curl -sS https://starship.rs/install.sh | sudo sh -s -- -y
  - |
    if ! grep -q "starship init bash" /home/${username}/.bashrc; then
      echo 'eval "$(starship init bash)"' >> /home/${username}/.bashrc
    fi

  # Install Temporal CLI
  - curl -sSf https://temporal.download/cli.sh | sh -s -- --dir /home/${username}/.temporalio
  - |
    if ! grep -q "PATH=\$PATH:/home/${username}/.temporalio/bin" /home/${username}/.bashrc; then
      echo 'export PATH=$PATH:/home/${username}/.temporalio/bin' >> /home/${username}/.bashrc
    fi

  # Install Hashicorp vault cli
  - wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
  - echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list > /dev/null
  - apt update && apt install vault

  # Install docker
  - mkdir -p /etc/apt/keyrings
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
  - apt-get update
  - apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
  # Change Docker storage path to a hidden folder
  - systemctl enable docker
  - systemctl start docker
  - mkdir -p /home/${username}/.docker-data
  - |
    if [ -f /etc/docker/daemon.json ]; then
      jq '. + {"data-root": "/home/${username}/.docker-data"}' /etc/docker/daemon.json > /tmp/daemon.json && mv /tmp/daemon.json /etc/docker/daemon.json
    else
      echo '{"data-root": "/home/${username}/.docker-data"}' | jq '.' > /etc/docker/daemon.json
    fi
  - systemctl restart docker

  # start coder agent service
  - systemctl enable coder-agent
  - systemctl start coder-agent

  # run docker prune
  - docker system prune -f &
  
  # Print completion message
  - echo "Setup complete!"